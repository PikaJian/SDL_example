cmake_minimum_required(VERSION 2.8)
project(test)
#set ( CMAKE_VERBOSE_MAKEFILE true  )
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")
#-O1 -fno-omit-frame-pointer -fsanitize=address -fsanitize=thread
set(CMAKE_CXX_FLAGS "-fno-omit-frame-pointer -fsanitize=address -fPIE -O1 -std=c++11 -stdlib=libc++ -Wall -g")
#set(CMAKE_CXX_FLAGS "-fPIE -Weffc++ -O1 -std=c++11 -stdlib=libc++ -Wall -g")
SET(CMAKE_EXE_LINKER_FLAGS  "-lc++ -lc++abi -pie -lpthread -lrt" )
#SET(CMAKE_EXE_LINKER_FLAGS  "-lc++ -lc++abi -pie -lpthread" )
#SET(CMAKE_CXX_COMPILER /usr/local/bin/clang++)
#SET(CMAKE_C_COMPILER /usr/local/bin/clang)
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
message("Using Clang")
    # using Clang
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    # using GCC
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    # using Intel C++
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    # using Visual Studio C++
endif()
find_package(FFMPEG_BUILD REQUIRED)
if (NOT FFMPEG_BUILD_FOUND)
      message(FATAL_ERROR "Libary FFMPEG_BUILD not found")
endif (NOT FFMPEG_BUILD_FOUND)
add_definitions(${FFMPEG_BUILD_DEFINITIONS})
include_directories(${FFMPEG_BUILD_INCLUDE_DIR})
set(LIBRARIES ${FFMPEG_BUILD_LIBRARIES} )
link_directories(${FFMPEG_BUILD_LIBRARIES}) 
#message(${FFMPEG_BUILD_INCLUDE_DIR})
#message(${LIBRARIES})
#add_subdirectory(src/ex1)
#add_subdirectory(src/ex4)
#add_subdirectory(src/ex5)
#add_subdirectory(src/gtk)
add_subdirectory(src/lib)
